---------------------------------
-- 32 bit ALU needs to support ADD, SUB, AND, OR, SLL, SRL, SLT and have zero-check and overflow indicators
-- ALU performs logic operations based on data inputs and the ALU control dictates the type of operation
---------------------------------

library IEE;
use IEE.STD_LOGIC_1164.ALL;
use IEE.NUMERIC_STD.ALL;

entity ALU is
  Port  ( data1       : in  STD_LOGIC_VECTOR (31 downto 0); -- Read data 1 is first data input
          data2       : in  STD_LOGIC_VECTOR (31 downto 0); -- Read data 2 is second data input
          ALU_control : in  STD_LOGIC_VECTOR (2 downto 0);  -- Alu control tells type of operation
          
          out         : out STD_LOGIC_VECTOR (31 downto 0); -- Alu result 
          Zero        : out STD_LOGIC);                     -- Alu zero returns when 'out' is 0
end ALU;


-------------------------
--ALU description--------
architecture Behavioral of ALU is
  signal  result_temp : STD_LOGIC_VECTOR (31 downto 0);
begin
  process(data1, data2, ALU_control)
  begin
  
    -- use adder for ADD and SUB
    case ALU_control is  
      when "000" => --ADD : add the values of data1 and data2 together
        result_temp <= std_logic_vector(unsigned(data1) + unsigned(data2)); -- use adder
        
      when "001" => --SUB : subtract the value of data2 from data1
        result_temp <= std_logic_vector(unsigned(data1) - unsigned(data2)); -- use adder
      
      when "010" => --AND : check boolean of data1 AND data2
        result_temp <= data1 and data2;
        
      when "011" => --OR : check boolean of data1 OR data2
        result_temp <= data1 or data2;
       
      when "100" => --SLL : shifts
        result_temp <= --
        
      when "101" => --SRL
        result_temp <= --
       
      when "110" => --SLT : set output to '1' if data1 is less thatn data2
        if  (data1 < data2) then
          result_temp <= 00000001;
        else  
          result_temp <= 00000000;
        end if;
      
      when others => null; -- no valid ALU opcode
        result_temp <= 00000000; 
    end case;
      
  end process;
  
  ------------------------------
  out <= result_temp; -- set ALU result output to the temp value
  if resut_temp = 00000000 then -- if alu result is '0' then return Zero as true
    Zero <= '1';
  else
    Zero <= '0';
  
end Behavioral;
